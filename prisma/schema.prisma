generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["views"]
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id            String         @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  email         String         @unique @db.VarChar(100)
  password      String
  name          String         @db.VarChar(50)
  role          Role           @default(USER)
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @default(now()) @updatedAt
  detail        User_Detail?
  credentials   Credential[]
  polls         Poll[]
  votes         Vote[]
  comments      Comment[]
  notifications Notification[]
  followers     Follower[]     @relation("userFollowers")
  following     Follower[]     @relation("followerUsers")
}

model User_Detail {
  id         String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  avatar_url String?
  full_name  String?
  gender     Gender?
  birthday   DateTime?
  address    Json?
  phone      String?
  updatedAt  DateTime  @default(now()) @updatedAt
  userId     String    @unique @db.Uuid
  user       User      @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Credential {
  id         String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  user       User     @relation(fields: [userId], references: [id])
  userId     String   @unique @db.Uuid
  name       String?
  externalId String   @unique
  publicKey  Bytes    @unique
  signCount  Int      @default(0)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

model Poll {
  id          String       @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  createdById String       @db.Uuid
  createdBy   User         @relation(fields: [createdById], references: [id])
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @default(now()) @updatedAt
  startedAt   DateTime?
  tags        Tag[]        @relation("tagPolls")
  pollTags    PollTag[]    @relation("pollTag")
  PollDetail  PollDetail[]
  votes        Vote[]
}

model Tag {
  id      String    @id @default(uuid())
  name    String    @unique
  polls   Poll[]    @relation("tagPolls")
  PollTag PollTag[]
}

model PollTag {
  pollId String @db.Uuid
  tagId  String

  poll Poll @relation("pollTag", fields: [pollId], references: [id])
  tag  Tag  @relation(fields: [tagId], references: [id])

  @@id([pollId, tagId])
}

model PollDetail {
  id          String    @id @default(uuid())
  pollId      String    @db.Uuid
  title       String
  type        Privacy
  options     Json[]
  imageUrl    String?
  description String
  poll        Poll      @relation(fields: [pollId], references: [id])
  option      Int
  updatedAt   DateTime  @default(now()) @updatedAt
  comments    Comment[] @relation("pollDetailComments")
}

model Vote {
  id        String   @id @default(uuid())
  pollId    String   @db.Uuid
  poll      Poll     @relation(fields: [pollId], references: [id])
  userId    String   @db.Uuid
  user      User     @relation(fields: [userId], references: [id])
  option    Int
  updatedAt DateTime @default(now()) @updatedAt
}

model Comment {
  id           String     @id @default(uuid())
  content      String
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @default(now()) @updatedAt
  pollDetailId String
  pollDetail   PollDetail @relation("pollDetailComments", fields: [pollDetailId], references: [id])
  userId       String     @db.Uuid
  user         User       @relation(fields: [userId], references: [id])
}

model Follower {
  userId     String @db.Uuid
  followerId String @db.Uuid

  user     User @relation("userFollowers", fields: [userId], references: [id])
  follower User @relation("followerUsers", fields: [followerId], references: [id])

  @@id([userId, followerId])
}

model Notification {
  id        String   @id @default(uuid())
  userId    String   @db.Uuid
  user      User     @relation(fields: [userId], references: [id])
  message   String
  read      Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
}

enum Role {
  USER
  ADMIN
}

enum TimeUnit {
  Y
  M
  D
  W
  H
  m
  s
}

enum Gender {
  MALE
  FEMALE
  OTHER
}

enum Privacy {
  PUBLIC
  PRIVATE
}
