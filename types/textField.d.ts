type TextFieldProps = {
  id: string;
  label?: string;
  placeholder?: string;
  value?: string;
  onChange?: (value: string) => void;
  error?: string;
  disabled?: boolean;
  className?: string;
  style?: React.CSSProperties;
  type?: string;
  autoComplete?: string;
  autoFocus?: boolean;
  maxLength?: number;
  minLength?: number;
  pattern?: string;
  required?: boolean;
  rows?: number;
  cols?: number;
  rowsMax?: number;
  wrap?: string;
  spellCheck?: boolean;
  readOnly?: boolean;
  autoSize?: boolean;
  inputMode?: string;
  inputRef?: React.Ref<HTMLInputElement>;
  inputProps?: React.InputHTMLAttributes<HTMLInputElement>;
  onKeyDown?: React.KeyboardEventHandler<HTMLInputElement>;
  onFocus?: React.FocusEventHandler<HTMLInputElement>;
  onBlur?: React.FocusEventHandler<HTMLInputElement>;
  onCompositionStart?: React.CompositionEventHandler<HTMLInputElement>;
  onCompositionUpdate?: React.CompositionEventHandler<HTMLInputElement>;
  onCompositionEnd?: React.CompositionEventHandler<HTMLInputElement>;
  onInput?: React.FormEventHandler<HTMLInputElement>;
  onInvalid?: React.FormEventHandler<HTMLInputElement>;
  onReset?: React.FormEventHandler<HTMLInputElement>;
  onSearch?: React.FormEventHandler<HTMLInputElement>;
  onSubmit?: React.FormEventHandler<HTMLInputElement>;
  onWheel?: React.WheelEventHandler<HTMLInputElement>;
  onClick?: React.MouseEventHandler<HTMLInputElement>;
  onContextMenu?: React.MouseEventHandler<HTMLInputElement>;
  onDoubleClick?: React.MouseEventHandler<HTMLInputElement>;
  onDrag?: React.DragEventHandler<HTMLInputElement>;
  onDragEnd?: React.DragEventHandler<HTMLInputElement>;
  onDragEnter?: React.DragEventHandler<HTMLInputElement>;
  onDragExit?: React.DragEventHandler<HTMLInputElement>;
  onDragLeave?: React.DragEventHandler<HTMLInputElement>;
  onDragOver?: React.DragEventHandler<HTMLInputElement>;
  onDrop?: React.DragEventHandler<HTMLInputElement>;
  onMouseDown?: React.MouseEventHandler<HTMLInputElement>;
  onMouseEnter?: React.MouseEventHandler<HTMLInputElement>;
  onMouseLeave?: React.MouseEventHandler<HTMLInputElement>;
  onMouseMove?: React.MouseEventHandler<HTMLInputElement>;
  onMouseOut?: React.MouseEventHandler<HTMLInputElement>;
  onMouseOver?: React.MouseEventHandler<HTMLInputElement>;
  onMouseUp?: React.MouseEventHandler<HTMLInputElement>;
  onTouchCancel?: React.TouchEventHandler<HTMLInputElement>;
  onTouchEnd?: React.TouchEventHandler<HTMLInputElement>;
  onTouchMove?: React.TouchEventHandler<HTMLInputElement>;
  onTouchStart?: React.TouchEventHandler<HTMLInputElement>;
  onPointerCancel?: React.PointerEventHandler<HTMLInputElement>;
  onPointerDown?: React.PointerEventHandler<HTMLInputElement>;
  onPointerEnter?: React.PointerEventHandler<HTMLInputElement>;
  onPointerLeave?: React.PointerEventHandler<HTMLInputElement>;
  onPointerMove?: React.PointerEventHandler<HTMLInputElement>;
  onPointerOut?: React.PointerEventHandler<HTMLInputElement>;
  onPointerOver?: React.PointerEventHandler<HTMLInputElement>;
  onPointerUp?: React.PointerEventHandler<HTMLInputElement>;
  onGotPointerCapture?: React.PointerEventHandler<HTMLInputElement>;
  onLostPointerCapture?: React.PointerEventHandler<HTMLInputElement>;
  onPointerCaptureLost?: React.PointerEventHandler<HTMLInputElement>;
  onPointerCaptureChange?: React.PointerEventHandler<HTMLInputElement>;
  onScroll?: React.UIEventHandler<HTMLInputElement>;
  onWheelCapture?: React.WheelEventHandler<HTMLInputElement>;
  onKeyDownCapture?: React.KeyboardEventHandler<HTMLInputElement>;
  onKeyPressCapture?: React.KeyboardEventHandler<HTMLInputElement>;
  onKeyUpCapture?: React.KeyboardEventHandler<HTMLInputElement>;
  onFocusCapture?: React.FocusEventHandler<HTMLInputElement>;
  onBlurCapture?: React.FocusEventHandler<HTMLInputElement>;
  onCompositionStartCapture?: React.CompositionEventHandler<HTMLInputElement>;
  onCompositionUpdateCapture?: React.CompositionEventHandler<HTMLInputElement>;
  onCompositionEndCapture?: React.CompositionEventHandler<HTMLInputElement>;
  onInputCapture?: React.FormEventHandler<HTMLInputElement>;
  onInvalidCapture?: React.FormEventHandler<HTMLInputElement>;
  onResetCapture?: React.FormEventHandler<HTMLInputElement>;
  onSearchCapture?: React.FormEventHandler<HTMLInputElement>;
  onSubmitCapture?: React.FormEventHandler<HTMLInputElement>;
  onClickCapture?: React.MouseEventHandler<HTMLInputElement>;
  onContextMenuCapture?: React.MouseEventHandler<HTMLInputElement>;
  onDoubleClickCapture?: React.MouseEventHandler<HTMLInputElement>;
  onDragCapture?: React.DragEventHandler<HTMLInputElement>;
  onDragEndCapture?: React.DragEventHandler<HTMLInputElement>;
  onDragEnterCapture?: React.DragEventHandler<HTMLInputElement>;
  onDragExitCapture?: React.DragEventHandler<HTMLInputElement>;
  onDragLeaveCapture?: React.DragEventHandler<HTMLInputElement>;
  onDragOverCapture?: React.DragEventHandler<HTMLInputElement>;
  onDropCapture?: React.DragEventHandler<HTMLInputElement>;
  onMouseDownCapture?: React.MouseEventHandler<HTMLInputElement>;
  onMouseEnterCapture?: React.MouseEventHandler<HTMLInputElement>;
  onMouseLeaveCapture?: React.MouseEventHandler<HTMLInputElement>;
  onMouseMoveCapture?: React.MouseEventHandler<HTMLInputElement>;
  onMouseOutCapture?: React.MouseEventHandler<HTMLInputElement>;
  onMouseOverCapture?: React.MouseEventHandler<HTMLInputElement>;
  onMouseUpCapture?: React.MouseEventHandler<HTMLInputElement>;
  onTouchCancelCapture?: React.TouchEventHandler<HTMLInputElement>;
  onTouchEndCapture?: React.TouchEventHandler<HTMLInputElement>;
  onTouchMoveCapture?: React.TouchEventHandler<HTMLInputElement>;
  onTouchStartCapture?: React.TouchEventHandler<HTMLInputElement>;
  onPointerCancelCapture?: React.PointerEventHandler<HTMLInputElement>;
  onPointerDownCapture?: React.PointerEventHandler<HTMLInputElement>;
  onPointerEnterCapture?: React.PointerEventHandler<HTMLInputElement>;
  onPointerLeaveCapture?: React.PointerEventHandler<HTMLInputElement>;
  onPointerMoveCapture?: React.PointerEventHandler<HTMLInputElement>;
  onPointerOutCapture?: React.PointerEventHandler<HTMLInputElement>;
  onPointerOverCapture?: React.PointerEventHandler<HTMLInputElement>;
  onPointerUpCapture?: React.PointerEventHandler<HTMLInputElement>;
  onGotPointerCaptureCapture?: React.PointerEventHandler<HTMLInputElement>;
  onLostPointerCaptureCapture?: React.PointerEventHandler<HTMLInputElement>;
  onPointerCaptureLostCapture?: React.PointerEventHandler<HTMLInputElement>;
  onPointerCaptureChangeCapture?: React.PointerEventHandler<HTMLInputElement>;
  onScrollCapture?: React.UIEventHandler<HTMLInputElement>;
  onWheelCaptureCapture?: React.WheelEventHandler<HTMLInputElement>;
  onKeyDownCaptureCapture?: React.KeyboardEventHandler<HTMLInputElement>;
  onKeyPressCaptureCapture?: React.KeyboardEventHandler<HTMLInputElement>;
  onKeyUpCaptureCapture?: React.KeyboardEventHandler<HTMLInputElement>;
  onFocusCaptureCapture?: React.FocusEventHandler<HTMLInputElement>;
  onBlurCaptureCapture?: React.FocusEventHandler<HTMLInputElement>;
  onCompositionStartCaptureCapture?: React.CompositionEventHandler<HTMLInputElement>;
  onCompositionUpdateCaptureCapture?: React.CompositionEventHandler<HTMLInputElement>;
  onCompositionEndCaptureCapture?: React.CompositionEventHandler<HTMLInputElement>;
  onInputCaptureCapture?: React.FormEventHandler<HTMLInputElement>;
  onInvalidCaptureCapture?: React.FormEventHandler<HTMLInputElement>;
  onResetCaptureCapture?: React.FormEventHandler<HTMLInputElement>;
  onSearchCaptureCapture?: React.FormEventHandler<HTMLInputElement>;
  onSubmitCaptureCapture?: React.FormEventHandler<HTMLInputElement>;
  onClickCaptureCapture?: React.MouseEventHandler<HTMLInputElement>;
  onContextMenuCaptureCapture?: React.MouseEventHandler<HTMLInputElement>;
  onDoubleClickCaptureCapture?: React.MouseEventHandler<HTMLInputElement>;
  onDragCaptureCapture?: React.DragEventHandler<HTMLInputElement>;
  onDragEndCaptureCapture?: React.DragEventHandler<HTMLInputElement>;
  onDragEnterCaptureCapture?: React.DragEventHandler<HTMLInputElement>;
  onDragExitCaptureCapture?: React.DragEventHandler<HTMLInputElement>;
  onDragLeaveCaptureCapture?: React.DragEventHandler<HTMLInputElement>;
  onDragOverCaptureCapture?: React.DragEventHandler<HTMLInputElement>;
  children?: React.ReactNode;
};

type LabelProps = {
  children?: React.ReactNode;
  className?: string;
  style?: React.CSSProperties;
  htmlFor?: string;
  title?: string;
};
